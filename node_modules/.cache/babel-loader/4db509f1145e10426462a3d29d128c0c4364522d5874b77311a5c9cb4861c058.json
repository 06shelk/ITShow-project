{"ast":null,"code":"var _jsxFileName = \"C:\\\\ITShow-project\\\\src\\\\components\\\\study-game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst problems = [{\n  problem: \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\n  answer: \"펀더멘탈\"\n}, {\n  problem: \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\n  answer: \"시가총액\"\n}, {\n  problem: \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\n  answer: \"공시\"\n}, {\n  problem: \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\n  answer: \"HTS(홈 트레이딩 시스템)\"\n}, {\n  problem: \"주식을 사는 것을 의미하는 것은?\",\n  answer: \"매수\"\n}, {\n  problem: \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\n  answer: \"매도\"\n}, {\n  problem: \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\n  answer: \"배당\"\n}, {\n  problem: \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\n  answer: \"시가\"\n}, {\n  problem: \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\n  answer: \"종가\"\n}, {\n  problem: \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\n  answer: \"ROE(자기자본이익율)\"\n}, {\n  problem: \"주당순이익을 의미하는 것은?\",\n  answer: \"EPS\"\n}, {\n  problem: \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\n  answer: \"PER\"\n}, {\n  problem: \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\n  answer: \"PBR\"\n}];\nconst App = () => {\n  _s();\n  const [totalTime] = useState(30);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [round, setRound] = useState(1);\n  const [score, setScore] = useState(0);\n  const [question, setQuestion] = useState(\"\");\n  const [answerArray, setAnswerArray] = useState([]);\n  const [questionArray, setQuestionArray] = useState([]);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (timeElapsed >= totalTime) {\n        clearInterval(timer);\n        alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\n      } else {\n        setTimeElapsed(prevTimeElapsed => prevTimeElapsed + 1);\n      }\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [timeElapsed, totalTime, score]);\n  const updateProgressBar = () => {\n    const progress = timeElapsed / totalTime * 100;\n    return {\n      height: `${progress}%`\n    };\n  };\n  const gameAnswerAppear = () => {\n    if (timeElapsed >= totalTime) return;\n    let rand1;\n    do {\n      rand1 = Math.floor(Math.random() * problems.length);\n    } while (questionArray.includes(rand1));\n    setQuestionArray(prevQuestionArray => [...prevQuestionArray, rand1]);\n    setRound(prevRound => prevRound + 1);\n    setQuestion(problems[rand1].problem);\n    const randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\n    const shuffledAnswers = shuffleAnswers(rand1, randomAnswerIndex);\n    setAnswerArray(shuffledAnswers);\n  };\n  const shuffleAnswers = (correctAnswerIndex, randomAnswerIndex) => {\n    const answers = [];\n    const usedProblems = [correctAnswerIndex];\n    for (let i = 1; i <= 4; i++) {\n      if (i === randomAnswerIndex) {\n        answers.push(problems[correctAnswerIndex].answer);\n      } else {\n        let randomNotAnswerIndex;\n        do {\n          randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\n        } while (usedProblems.includes(randomNotAnswerIndex));\n        usedProblems.push(randomNotAnswerIndex);\n        answers.push(problems[randomNotAnswerIndex].answer);\n      }\n    }\n    return answers;\n  };\n  const handleAnswerClick = clickedButtonIndex => {\n    if (clickedButtonIndex === answerArray.length) {\n      console.log(\"정답입니다!\");\n      setScore(prevScore => prevScore + 10);\n    } else {\n      console.log(\"틀렸습니다!\");\n    }\n    gameAnswerAppear();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question_number\",\n      children: [\"Q\", round, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: answerArray.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `answer answer${index + 1}`,\n        onClick: () => handleAnswerClick(index + 1),\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timer\",\n      style: updateProgressBar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"X53PFN57E02DJfl3ThiyAeBLXTU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","problems","problem","answer","App","_s","totalTime","timeElapsed","setTimeElapsed","round","setRound","score","setScore","question","setQuestion","answerArray","setAnswerArray","questionArray","setQuestionArray","timer","setInterval","clearInterval","alert","prevTimeElapsed","updateProgressBar","progress","height","gameAnswerAppear","rand1","Math","floor","random","length","includes","prevQuestionArray","prevRound","randomAnswerIndex","shuffledAnswers","shuffleAnswers","correctAnswerIndex","answers","usedProblems","i","push","randomNotAnswerIndex","handleAnswerClick","clickedButtonIndex","console","log","prevScore","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","id","style","_c","$RefreshReg$"],"sources":["C:/ITShow-project/src/components/study-game.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst problems = [\r\n  {\r\n    problem: \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\r\n    answer: \"펀더멘탈\"\r\n  },\r\n  {\r\n    problem: \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\r\n    answer: \"시가총액\"\r\n  },\r\n  {\r\n    problem: \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\r\n    answer: \"공시\"\r\n  },\r\n  {\r\n    problem: \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\r\n    answer: \"HTS(홈 트레이딩 시스템)\"\r\n  },\r\n  {\r\n    problem: \"주식을 사는 것을 의미하는 것은?\",\r\n    answer: \"매수\"\r\n  },\r\n  {\r\n    problem: \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\r\n    answer: \"매도\"\r\n  },\r\n  {\r\n    problem: \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\r\n    answer: \"배당\"\r\n  },\r\n  {\r\n    problem: \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\r\n    answer: \"시가\"\r\n  },\r\n  {\r\n    problem: \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\r\n    answer: \"종가\"\r\n  },\r\n  {\r\n    problem: \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\r\n    answer: \"ROE(자기자본이익율)\"\r\n  },\r\n  {\r\n    problem: \"주당순이익을 의미하는 것은?\",\r\n    answer: \"EPS\"\r\n  },\r\n  {\r\n    problem: \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\r\n    answer: \"PER\"\r\n  },\r\n  {\r\n    problem: \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\r\n    answer: \"PBR\"\r\n  }\r\n];\r\n\r\nconst App = () => {\r\n  const [totalTime] = useState(30);\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n  const [round, setRound] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [answerArray, setAnswerArray] = useState([]);\r\n  const [questionArray, setQuestionArray] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (timeElapsed >= totalTime) {\r\n        clearInterval(timer);\r\n        alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\r\n      } else {\r\n        setTimeElapsed(prevTimeElapsed => prevTimeElapsed + 1);\r\n      }\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(timer);\r\n  }, [timeElapsed, totalTime, score]);\r\n\r\n  const updateProgressBar = () => {\r\n    const progress = (timeElapsed / totalTime) * 100;\r\n    return { height: `${progress}%` };\r\n  };\r\n\r\n  const gameAnswerAppear = () => {\r\n    if (timeElapsed >= totalTime) return;\r\n\r\n    let rand1;\r\n    do {\r\n      rand1 = Math.floor(Math.random() * problems.length);\r\n    } while (questionArray.includes(rand1));\r\n    \r\n    setQuestionArray(prevQuestionArray => [...prevQuestionArray, rand1]);\r\n    setRound(prevRound => prevRound + 1);\r\n    setQuestion(problems[rand1].problem);\r\n    \r\n    const randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\r\n    const shuffledAnswers = shuffleAnswers(rand1, randomAnswerIndex);\r\n    setAnswerArray(shuffledAnswers);\r\n  };\r\n\r\n  const shuffleAnswers = (correctAnswerIndex, randomAnswerIndex) => {\r\n    const answers = [];\r\n    const usedProblems = [correctAnswerIndex];\r\n    \r\n    for (let i = 1; i <= 4; i++) {\r\n      if (i === randomAnswerIndex) {\r\n        answers.push(problems[correctAnswerIndex].answer);\r\n      } else {\r\n        let randomNotAnswerIndex;\r\n        do {\r\n          randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\r\n        } while (usedProblems.includes(randomNotAnswerIndex));\r\n        \r\n        usedProblems.push(randomNotAnswerIndex);\r\n        answers.push(problems[randomNotAnswerIndex].answer);\r\n      }\r\n    }\r\n    return answers;\r\n  };\r\n\r\n  const handleAnswerClick = (clickedButtonIndex) => {\r\n    if (clickedButtonIndex === answerArray.length) {\r\n      console.log(\"정답입니다!\");\r\n      setScore(prevScore => prevScore + 10);\r\n    } else {\r\n      console.log(\"틀렸습니다!\");\r\n    }\r\n    gameAnswerAppear();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"question_number\">Q{round}.</div>\r\n      <div className=\"question\">{question}</div>\r\n      <div>\r\n        {answerArray.map((answer, index) => (\r\n          <button key={index} className={`answer answer${index + 1}`} onClick={() => handleAnswerClick(index + 1)}>{answer}</button>\r\n        ))}\r\n      </div>\r\n      <div id=\"timer\" style={updateProgressBar()}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}