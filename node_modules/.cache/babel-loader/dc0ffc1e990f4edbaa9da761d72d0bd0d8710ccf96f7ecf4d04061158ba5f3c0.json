{"ast":null,"code":"let problems = [{\n  \"problem\": \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\n  \"answer\": \"펀더멘탈\"\n}, {\n  \"problem\": \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\n  \"answer\": \"시가총액\"\n}, {\n  \"problem\": \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\n  \"answer\": \"공시\"\n}, {\n  \"problem\": \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\n  \"answer\": \"HTS(홈 트레이딩 시스템)\"\n}, {\n  \"problem\": \"주식을 사는 것을 의미하는 것은?\",\n  \"answer\": \"매수\"\n}, {\n  \"problem\": \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\n  \"answer\": \"매도\"\n}, {\n  \"problem\": \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\n  \"answer\": \"배당\"\n}, {\n  \"problem\": \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\n  \"answer\": \"시가\"\n}, {\n  \"problem\": \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\n  \"answer\": \"종가\"\n}, {\n  \"problem\": \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\n  \"answer\": \"ROE(자기자본이익율)\"\n}, {\n  \"problem\": \"주당순이익을 의미하는 것은?\",\n  \"answer\": \"EPS\"\n}, {\n  \"problem\": \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\n  \"answer\": \"PER\"\n}, {\n  \"problem\": \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\n  \"answer\": \"PBR\"\n}];\n\n// // 타이머 설정 (초 단위)\n// const totalTime = 30;\n// let timeElapsed = 0;\n// let timer;\n\n// // 게임 진행에 필요한 변수들\n// let questionArray = [];\n// let answerArray = [];\n// let round = 1;\n// let score = 0;\n\n// // 타이머 바 업데이트 함수\n// function updateProgressBar() {\n//   const progress = (timeElapsed / totalTime) * 100;\n//   document.getElementById('timer').style.height = progress + '%';\n// }\n\n// // 게임 진행 함수\n// function gameAnswerAppear() {\n//   // 타이머가 종료되면 게임 종료\n//   if (timeElapsed >= totalTime) {\n//     clearInterval(timer);\n//     return;\n//   }\n\n//   // 몇번째 문제인지\n//   document.querySelector(\".question_number\").innerHTML = \"Q\" + round + \".\";\n//   round++;\n\n//   // 한 문제씩 나오도록 수정\n//   let rand1;\n//   do {\n//     rand1 = Math.floor(Math.random() * problems.length);\n//   } while (questionArray.includes(rand1));\n\n//   questionArray.push(rand1);\n\n//   // 문제 내용을 표시하는 엘리먼트 변경\n//   document.querySelector(\".question\").innerHTML = problems[rand1].problem;\n//   //console.log(\"문제 내용:\", problems[rand1].problem);\n\n//   // 문제에 대한 답을 랜덤한 버튼에 배치\n//   var randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\n//   var randomAnswerElement = document.querySelector('.answer.answer' + randomAnswerIndex);\n//   randomAnswerElement.innerText = problems[rand1].answer;\n//   console.log(\"답:\", problems[rand1].answer);\n\n//   // 다른 버튼들에 문제를 배치\n//   answerArray.push(randomAnswerIndex);\n//   let usedProblems = [rand1];\n//   for (let i = 1; i <= 4; i++) {\n//     if (i !== randomAnswerIndex) {\n//       let randomNotAnswerIndex;\n//       do {\n//         randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\n//       } while (usedProblems.includes(randomNotAnswerIndex));\n//       usedProblems.push(randomNotAnswerIndex);\n//       document.querySelector('.answer.answer' + i).innerText = problems[randomNotAnswerIndex].answer;\n//     }\n//   }\n//   console.log(answerArray);\n\n// } //updateProgressBar()\n\n// // 게임 시작 함수\n// function gameStart() {\n//   // 타이머 시작\n//   timer = setInterval(function() {\n//     if (timeElapsed >= totalTime) {\n//       clearInterval(timer);\n//       alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\n//     } else {\n//       timeElapsed++;\n//       updateProgressBar();\n//     }\n//   }, 1000);\n\n//   // 게임 시작 시 첫 문제 표시\n//   gameAnswerAppear();\n\n//   // 버튼 이벤트 및 정답 처리\n//   document.querySelectorAll('.answer').forEach(button => {\n//     button.addEventListener('click', function(event) {\n//         const clickedButtonIndex = parseInt(button.classList[1].slice(-1));\n//         // 정답 확인 부분\n//         if (clickedButtonIndex === answerArray[answerArray.length - 1]) {\n//             console.log(\"정답입니다!\");\n//             score += 10;\n//             console.log(score);\n//             // 문제 생성\n//             gameAnswerAppear();\n//         } else {\n//             console.log(\"틀렸습니다!\");\n//             // 문제 생성\n//             gameAnswerAppear();\n//         }\n//     });\n//   });\n// } //gameStart()\n\n// // 게임 시작\n// gameStart();","map":{"version":3,"names":["problems"],"sources":["C:/ITShow-project/src/logic/study-game-logic.js"],"sourcesContent":["let problems = [ \r\n    {\r\n        \"problem\": \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\r\n        \"answer\": \"펀더멘탈\",\r\n    },\r\n    {\r\n        \"problem\": \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\r\n        \"answer\": \"시가총액\",\r\n    },\r\n    {\r\n      \"problem\": \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\r\n      \"answer\": \"공시\",\r\n    },\r\n    {\r\n        \"problem\": \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\r\n        \"answer\": \"HTS(홈 트레이딩 시스템)\",\r\n    },\r\n    {\r\n      \"problem\": \"주식을 사는 것을 의미하는 것은?\",\r\n      \"answer\": \"매수\",\r\n    },\r\n    {\r\n        \"problem\": \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\r\n        \"answer\": \"매도\",\r\n    },\r\n    {\r\n        \"problem\": \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\r\n        \"answer\": \"배당\",\r\n    },\r\n    {\r\n        \"problem\": \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\r\n        \"answer\": \"시가\",\r\n    },\r\n    {\r\n      \"problem\": \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\r\n      \"answer\": \"종가\",\r\n    },\r\n    {\r\n        \"problem\": \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\r\n        \"answer\": \"ROE(자기자본이익율)\",\r\n    }, {\r\n      \"problem\": \"주당순이익을 의미하는 것은?\",\r\n      \"answer\": \"EPS\",\r\n    },\r\n    {\r\n      \"problem\": \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\r\n      \"answer\": \"PER\",\r\n    },\r\n    {\r\n      \"problem\": \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\r\n      \"answer\": \"PBR\",\r\n    },\r\n\r\n]\r\n\r\n// // 타이머 설정 (초 단위)\r\n// const totalTime = 30;\r\n// let timeElapsed = 0;\r\n// let timer;\r\n\r\n// // 게임 진행에 필요한 변수들\r\n// let questionArray = [];\r\n// let answerArray = [];\r\n// let round = 1;\r\n// let score = 0;\r\n\r\n// // 타이머 바 업데이트 함수\r\n// function updateProgressBar() {\r\n//   const progress = (timeElapsed / totalTime) * 100;\r\n//   document.getElementById('timer').style.height = progress + '%';\r\n// }\r\n\r\n// // 게임 진행 함수\r\n// function gameAnswerAppear() {\r\n//   // 타이머가 종료되면 게임 종료\r\n//   if (timeElapsed >= totalTime) {\r\n//     clearInterval(timer);\r\n//     return;\r\n//   }\r\n\r\n//   // 몇번째 문제인지\r\n//   document.querySelector(\".question_number\").innerHTML = \"Q\" + round + \".\";\r\n//   round++;\r\n\r\n//   // 한 문제씩 나오도록 수정\r\n//   let rand1;\r\n//   do {\r\n//     rand1 = Math.floor(Math.random() * problems.length);\r\n//   } while (questionArray.includes(rand1));\r\n\r\n//   questionArray.push(rand1);\r\n\r\n//   // 문제 내용을 표시하는 엘리먼트 변경\r\n//   document.querySelector(\".question\").innerHTML = problems[rand1].problem;\r\n//   //console.log(\"문제 내용:\", problems[rand1].problem);\r\n\r\n//   // 문제에 대한 답을 랜덤한 버튼에 배치\r\n//   var randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\r\n//   var randomAnswerElement = document.querySelector('.answer.answer' + randomAnswerIndex);\r\n//   randomAnswerElement.innerText = problems[rand1].answer;\r\n//   console.log(\"답:\", problems[rand1].answer);\r\n\r\n//   // 다른 버튼들에 문제를 배치\r\n//   answerArray.push(randomAnswerIndex);\r\n//   let usedProblems = [rand1];\r\n//   for (let i = 1; i <= 4; i++) {\r\n//     if (i !== randomAnswerIndex) {\r\n//       let randomNotAnswerIndex;\r\n//       do {\r\n//         randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\r\n//       } while (usedProblems.includes(randomNotAnswerIndex));\r\n//       usedProblems.push(randomNotAnswerIndex);\r\n//       document.querySelector('.answer.answer' + i).innerText = problems[randomNotAnswerIndex].answer;\r\n//     }\r\n//   }\r\n//   console.log(answerArray);\r\n\r\n  \r\n// } //updateProgressBar()\r\n\r\n// // 게임 시작 함수\r\n// function gameStart() {\r\n//   // 타이머 시작\r\n//   timer = setInterval(function() {\r\n//     if (timeElapsed >= totalTime) {\r\n//       clearInterval(timer);\r\n//       alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\r\n//     } else {\r\n//       timeElapsed++;\r\n//       updateProgressBar();\r\n//     }\r\n//   }, 1000);\r\n\r\n//   // 게임 시작 시 첫 문제 표시\r\n//   gameAnswerAppear();\r\n\r\n//   // 버튼 이벤트 및 정답 처리\r\n//   document.querySelectorAll('.answer').forEach(button => {\r\n//     button.addEventListener('click', function(event) {\r\n//         const clickedButtonIndex = parseInt(button.classList[1].slice(-1));\r\n//         // 정답 확인 부분\r\n//         if (clickedButtonIndex === answerArray[answerArray.length - 1]) {\r\n//             console.log(\"정답입니다!\");\r\n//             score += 10;\r\n//             console.log(score);\r\n//             // 문제 생성\r\n//             gameAnswerAppear();\r\n//         } else {\r\n//             console.log(\"틀렸습니다!\");\r\n//             // 문제 생성\r\n//             gameAnswerAppear();\r\n//         }\r\n//     });\r\n//   });\r\n// } //gameStart()\r\n\r\n// // 게임 시작\r\n// gameStart();"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,CACX;EACI,SAAS,EAAE,iDAAiD;EAC5D,QAAQ,EAAE;AACd,CAAC,EACD;EACI,SAAS,EAAE,qDAAqD;EAChE,QAAQ,EAAE;AACd,CAAC,EACD;EACE,SAAS,EAAE,yCAAyC;EACpD,QAAQ,EAAE;AACZ,CAAC,EACD;EACI,SAAS,EAAE,yCAAyC;EACpD,QAAQ,EAAE;AACd,CAAC,EACD;EACE,SAAS,EAAE,oBAAoB;EAC/B,QAAQ,EAAE;AACZ,CAAC,EACD;EACI,SAAS,EAAE,2BAA2B;EACtC,QAAQ,EAAE;AACd,CAAC,EACD;EACI,SAAS,EAAE,mCAAmC;EAC9C,QAAQ,EAAE;AACd,CAAC,EACD;EACI,SAAS,EAAE,0BAA0B;EACrC,QAAQ,EAAE;AACd,CAAC,EACD;EACE,SAAS,EAAE,0BAA0B;EACrC,QAAQ,EAAE;AACZ,CAAC,EACD;EACI,SAAS,EAAE,+BAA+B;EAC1C,QAAQ,EAAE;AACd,CAAC,EAAE;EACD,SAAS,EAAE,iBAAiB;EAC5B,QAAQ,EAAE;AACZ,CAAC,EACD;EACE,SAAS,EAAE,oCAAoC;EAC/C,QAAQ,EAAE;AACZ,CAAC,EACD;EACE,SAAS,EAAE,4CAA4C;EACvD,QAAQ,EAAE;AACZ,CAAC,CAEJ;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}