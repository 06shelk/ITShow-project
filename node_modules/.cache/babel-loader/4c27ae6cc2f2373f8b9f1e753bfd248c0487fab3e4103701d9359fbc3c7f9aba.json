{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nlet problems = [{\n  \"problem\": \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\n  \"answer\": \"펀더멘탈\"\n}, {\n  \"problem\": \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\n  \"answer\": \"시가총액\"\n}, {\n  \"problem\": \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\n  \"answer\": \"공시\"\n}, {\n  \"problem\": \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\n  \"answer\": \"HTS(홈 트레이딩 시스템)\"\n}, {\n  \"problem\": \"주식을 사는 것을 의미하는 것은?\",\n  \"answer\": \"매수\"\n}, {\n  \"problem\": \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\n  \"answer\": \"매도\"\n}, {\n  \"problem\": \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\n  \"answer\": \"배당\"\n}, {\n  \"problem\": \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\n  \"answer\": \"시가\"\n}, {\n  \"problem\": \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\n  \"answer\": \"종가\"\n}, {\n  \"problem\": \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\n  \"answer\": \"ROE(자기자본이익율)\"\n}, {\n  \"problem\": \"주당순이익을 의미하는 것은?\",\n  \"answer\": \"EPS\"\n}, {\n  \"problem\": \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\n  \"answer\": \"PER\"\n}, {\n  \"problem\": \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\n  \"answer\": \"PBR\"\n}];\nfunction Game() {\n  _s();\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [round, setRound] = useState(1);\n  const [score, setScore] = useState(0);\n  const [questionArray, setQuestionArray] = useState([]);\n  const [answerArray, setAnswerArray] = useState([]);\n  let timer;\n  const totalTime = 30;\n  function updateProgressBar() {\n    const progress = timeElapsed / totalTime * 100;\n    document.getElementById('timer').style.height = progress + '%';\n  }\n  function gameAnswerAppear() {\n    if (timeElapsed >= totalTime) {\n      clearInterval(timer);\n      return;\n    }\n    setRound(round + 1);\n    let rand1;\n    do {\n      rand1 = Math.floor(Math.random() * problems.length);\n    } while (questionArray.includes(rand1));\n    setQuestionArray([...questionArray, rand1]);\n    document.querySelector(\".question\").innerHTML = problems[rand1].problem;\n    var randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\n    var randomAnswerElement = document.querySelector('.answer.answer' + randomAnswerIndex);\n    randomAnswerElement.innerText = problems[rand1].answer;\n    setAnswerArray([...answerArray, randomAnswerIndex]);\n    let usedProblems = [rand1];\n    for (let i = 1; i <= 4; i++) {\n      if (i !== randomAnswerIndex) {\n        let randomNotAnswerIndex;\n        do {\n          randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\n        } while (usedProblems.includes(randomNotAnswerIndex));\n        usedProblems.push(randomNotAnswerIndex);\n        document.querySelector('.answer.answer' + i).innerText = problems[randomNotAnswerIndex].answer;\n      }\n    }\n  }\n  function gameStart() {\n    timer = setInterval(() => {\n      if (timeElapsed >= totalTime) {\n        clearInterval(timer);\n        alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\n      } else {\n        setTimeElapsed(timeElapsed + 1);\n        updateProgressBar();\n      }\n    }, 1000);\n    gameAnswerAppear();\n    document.querySelectorAll('.answer').forEach(button => {\n      button.addEventListener('click', function (event) {\n        const clickedButtonIndex = parseInt(button.classList[1].slice(-1));\n        if (clickedButtonIndex === answerArray[answerArray.length - 1]) {\n          setScore(score + 10);\n          gameAnswerAppear();\n        } else {\n          gameAnswerAppear();\n        }\n      });\n    });\n  }\n}\n_s(Game, \"TrR1QWSlmX3L2dxn2rQ1PmO9eVw=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","problems","Game","_s","timeElapsed","setTimeElapsed","round","setRound","score","setScore","questionArray","setQuestionArray","answerArray","setAnswerArray","timer","totalTime","updateProgressBar","progress","document","getElementById","style","height","gameAnswerAppear","clearInterval","rand1","Math","floor","random","length","includes","querySelector","innerHTML","problem","randomAnswerIndex","randomAnswerElement","innerText","answer","usedProblems","i","randomNotAnswerIndex","push","gameStart","setInterval","alert","querySelectorAll","forEach","button","addEventListener","event","clickedButtonIndex","parseInt","classList","slice","_c","$RefreshReg$"],"sources":["C:/ITShow-project/src/logic/study-game-logic.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nlet problems = [\r\n  {\r\n    \"problem\": \"기업의 경제 상태를 나타내는 주요 지표로, 매출, 이익율, 부채 등이 포함되는 것은?\",\r\n    \"answer\": \"펀더멘탈\",\r\n  },\r\n  {\r\n    \"problem\": \"기업의 총 발행 주식수에 1주당 주가를 곱한 값으로, 시장에서 기업의 규모를 나타내는 것은?\",\r\n    \"answer\": \"시가총액\",\r\n  },\r\n  {\r\n    \"problem\": \"기업이 투자자나 이해관계자에게 사업내용, 재무상황 등을 알리는 제도는?\",\r\n    \"answer\": \"공시\",\r\n  },\r\n  {\r\n    \"problem\": \"개인 투자자가 PC로 주식 거래를 할 수 있는 프로그램을 말하는 것은?\",\r\n    \"answer\": \"HTS(홈 트레이딩 시스템)\",\r\n  },\r\n  {\r\n    \"problem\": \"주식을 사는 것을 의미하는 것은?\",\r\n    \"answer\": \"매수\",\r\n  },\r\n  {\r\n    \"problem\": \"가지고 있는 주식을 파는 것을 의미하는 것은?\",\r\n    \"answer\": \"매도\",\r\n  },\r\n  {\r\n    \"problem\": \"기업이 이익의 일부를 주주에게 돌려주는 것을 의미하는 것은?\",\r\n    \"answer\": \"배당\",\r\n  },\r\n  {\r\n    \"problem\": \"주식시장이 열릴 때의 주가를 의미하는 것은?\",\r\n    \"answer\": \"시가\",\r\n  },\r\n  {\r\n    \"problem\": \"주식시장이 닫힐 때의 주가를 의미하는 것은?\",\r\n    \"answer\": \"종가\",\r\n  },\r\n  {\r\n    \"problem\": \"기업의 순이익을 순자산에 대한 비율로 나타내는 것은?\",\r\n    \"answer\": \"ROE(자기자본이익율)\",\r\n  }, {\r\n    \"problem\": \"주당순이익을 의미하는 것은?\",\r\n    \"answer\": \"EPS\",\r\n  },\r\n  {\r\n    \"problem\": \"주가수익률로, 현재 주가와 주당순이익을 비교하여 사용되는 것은\",\r\n    \"answer\": \"PER\",\r\n  },\r\n  {\r\n    \"problem\": \"주당순자산으로, 회사를 청산했을 때 주주에게 분배될 순자산을 나타내는 것은?\",\r\n    \"answer\": \"PBR\",\r\n  },\r\n];\r\n\r\nfunction Game() {\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n  const [round, setRound] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const [questionArray, setQuestionArray] = useState([]);\r\n  const [answerArray, setAnswerArray] = useState([]);\r\n  let timer;\r\n\r\n  const totalTime = 30;\r\n\r\n  function updateProgressBar() {\r\n    const progress = (timeElapsed / totalTime) * 100;\r\n    document.getElementById('timer').style.height = progress + '%';\r\n  }\r\n\r\n  function gameAnswerAppear() {\r\n    if (timeElapsed >= totalTime) {\r\n      clearInterval(timer);\r\n      return;\r\n    }\r\n\r\n    setRound(round + 1);\r\n\r\n    let rand1;\r\n    do {\r\n      rand1 = Math.floor(Math.random() * problems.length);\r\n    } while (questionArray.includes(rand1));\r\n\r\n    setQuestionArray([...questionArray, rand1]);\r\n\r\n    document.querySelector(\".question\").innerHTML = problems[rand1].problem;\r\n\r\n    var randomAnswerIndex = Math.floor(Math.random() * 4) + 1;\r\n    var randomAnswerElement = document.querySelector('.answer.answer' + randomAnswerIndex);\r\n    randomAnswerElement.innerText = problems[rand1].answer;\r\n\r\n    setAnswerArray([...answerArray, randomAnswerIndex]);\r\n\r\n    let usedProblems = [rand1];\r\n    for (let i = 1; i <= 4; i++) {\r\n      if (i !== randomAnswerIndex) {\r\n        let randomNotAnswerIndex;\r\n        do {\r\n          randomNotAnswerIndex = Math.floor(Math.random() * problems.length);\r\n        } while (usedProblems.includes(randomNotAnswerIndex));\r\n        usedProblems.push(randomNotAnswerIndex);\r\n        document.querySelector('.answer.answer' + i).innerText = problems[randomNotAnswerIndex].answer;\r\n      }\r\n    }\r\n  }\r\n\r\n  function gameStart() {\r\n    timer = setInterval(() => {\r\n      if (timeElapsed >= totalTime) {\r\n        clearInterval(timer);\r\n        alert(`타이머가 종료되었습니다. 점수는 ${score}입니다.`);\r\n      } else {\r\n        setTimeElapsed(timeElapsed + 1);\r\n        updateProgressBar();\r\n      }\r\n    }, 1000);\r\n\r\n    gameAnswerAppear();\r\n\r\n    document.querySelectorAll('.answer').forEach(button => {\r\n      button.addEventListener('click', function (event) {\r\n        const clickedButtonIndex = parseInt(button.classList[1].slice(-1));\r\n        if (clickedButtonIndex === answerArray[answerArray.length - 1]) {\r\n          setScore(score + 10);\r\n          gameAnswerAppear();\r\n        } else {\r\n          gameAnswerAppear();\r\n        }\r\n      });\r\n    });\r\n  }}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}